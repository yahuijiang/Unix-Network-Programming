1. UDP
  UDP是面向消息的不可靠的数据包协议

2.UDP c/s过程

            客户端                                    服务器

                                                    
                                            +---------+
                                            |socket() |
                                            +---------+
                                                |
                                                |
                                                \/
                                            +---------+
                                            |bind()   |
                                            +---------+
                                                |
                                                |
                                                \/
                                            +----------+ 
                                            |recvfrom()|
           +--------+                       +----------+
           |socket()|                           |
           +--------+                           |
               |                                \/
               |                        block until receive client data
               \/
           +--------+    data(request)          |
           |sendto()|------------------------>  |
           +--------+                           |
              |                          process request
              |                                 | 
              |                                 |
              \/                                \/
          +----------+        data(response) +---------+
          |recvfrom()| <---------------------|sendto() |                        
          +----------+                       +---------+
              |
              |
              \/
          +----------+
          |close()   |
          +----------+



 3. sendto 函数
    1. sendto 可以指定接收端的协议的套接字地址
       recvfrom 可以获知发送端的协议的套接字地址
    2. 可以写一个没有数据的数据包，这将形成一个只有ip首部和udp首都的数据报
    3. sendto 成功返回只表示缓冲区中有足够的空间放数据，不表示已经发送到了对方，这也就是说如果服务器没有启动，引起的ICMP错误将不能返回给进程
        解决异步错误不能返回给进程的错误的一个方法是给UDP套接字调用connect
4. recvfrom 函数
    1. recvfrom返回0值是可以的，而tcp如果read返回0则表示对端的连接已经关闭了

5. tcp 服务器和udp服务器
    tcp 服务器是并发服务器，也就是tcp服务器在收到一个tcp connect请求的时候，会fork一个子进行去和客户端进行通讯
    UDP 服务器一般是单个进程服务所有的客户端

6. 套接字接收缓冲区
    每个UDP套接字都有一个接受缓冲区，到达该套接字的的所有数据都先放入到该缓冲区，如果缓冲区已经满了，则丢弃到达的数据报
    recvfrom 则是从缓冲区中按照FIFO的顺序取出一个数据报

7. connect 函数
    connect 的结果，内核将会做：
      1. 检测是否有异步错误产生
      2. 记录对端IP地址和端口

    调用了connect 函数后将不必使用sendto 和recvfrom来发送或者接受消息，而是用write/read来进行读写
      通过write 写到套接字上的数据将自动发送到connection 指定的的地址
8. UDP connect 可以调用多次，而tcp只能调用一次
    UCP调用connect的目的：
      1. 指定新的端口号和ip
      2. 断开套接字，在第二次调用的时候设为AF_UNSPEC，则用来断开

9. 性能
  在需要给同一个地址发送多个数据的时候，使用有链接的udp效率会高些~


